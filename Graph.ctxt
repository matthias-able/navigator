#BlueJ class context
comment0.params=m
comment0.target=Graph(int)
comment0.text=\n\ Konstruktor\n\ Parameter\:\ m\:\ gibt\ die\ maximale\ Anzahl\ von\ Knoten\ im\ Graphen\ an\n
comment1.params=k
comment1.target=void\ knotenEinfuegen(Knoten)
comment1.text=\n\ f\u00FCgt\ einen\ Knoten\ in\ die\ Knotenliste\ des\ Graphen\ ein,\ falls\ dies\ m\u00F6glich\ ist\n
comment10.params=
comment10.target=int[][]\ matrixGeben()
comment11.params=startort\ zielort
comment11.target=boolean\ existenz\u00DCberpr\u00FCfen(java.lang.String,\ java.lang.String)
comment2.params=start\ ziel\ wert
comment2.target=void\ kanteDefinierenSymmetrisch(java.lang.String,\ java.lang.String,\ int)
comment3.params=i\ j\ wert
comment3.target=void\ kanteEinfuegen(int,\ int,\ int)
comment3.text=\n\ einf\u00FCgen\ einer\ (gerichteten)\ Kante\ zwischen\ zwei\ Knoten,\ falls\ dies\ m\u00F6glich\ ist\n\ Knoten\ werden\ hierbei\ \u00FCber\ den\ Knotenindex\ identifiziert.\n\ Soll\ eine\ ungerichtete\ Kante\ zwischen\ i\ und\ j\ eingef\u00FCgt\ werden,\ so\ ist\ \n\ neben\ kanteEinfuegen(i,j)\ auch\ kanteEinfuegen(j,i)\ aufzurufen.\n\ Parameter\:\n\ \ \ \ \ \ i\ repr\u00E4sentiert\ den\ Knoten\ knotenliste[i]\ und\ j\ repr\u00E4sentiert\ den\ Knoten\ knotenliste[j]\n\ gr\u00F6\u00DFter\ Index\:\ maxAnzahl-1\ bzw.\ anzahl-1\n
comment4.params=i\ j
comment4.target=void\ kanteEntfernen(int,\ int)
comment4.text=\n\ entfernen\ einer\ (gerichteten)\ Kante\ zwischen\ zwei\ Knoten,\ falls\ dies\ m\u00F6glich\ ist\n\ Knoten\ werden\ hierbei\ \u00FCber\ den\ Knotenindex\ identifiziert.\n\ Soll\ eine\ ungerichtete\ Kante\ zwischen\ i\ und\ j\ entfernt\ werden,\ so\ ist\ \n\ neben\ kanteEntfernen(i,j)\ auch\ kanteEntfernen(j,i)\ aufzurufen.\n\ Parameter\:\n\ \ \ \ \ \ i\ repr\u00E4sentiert\ den\ Knoten\ knotenliste[i]\ und\ j\ repr\u00E4sentiert\ den\ Knoten\ knotenliste[j]\n\ gr\u00F6\u00DFter\ Index\:\ maxAnzahl-1\ bzw.\ anzahl-1\n
comment5.params=name
comment5.target=int\ knotenIndexSuchen(java.lang.String)
comment5.text=\n\ Zu\ einem\ gegebenen\ Knoten\ wird\ der\ zugeh\u00F6rige\ Index\ in\ der\ Knotenliste\ gesucht\ und,\ falls\ m\u00F6glich,\n\ zur\u00FCckgegeben.\n\ Ist\ der\ Knoten\ nicht\ in\ der\ Knotenliste\ enthalten,\ so\ wird\ eine\ entsprechende\ Textmeldung\ ausgegeben.\n\n
comment6.params=name
comment6.target=void\ knotenLoeschen(java.lang.String)
comment7.params=
comment7.target=void\ adjazenzmatrixAusgeben()
comment7.text=\n\ Ausgabe\ der\ Adjazenzmatrix\ auf\ der\ Konsole\n
comment8.params=
comment8.target=Knoten[]\ knotenlisteGeben()
comment9.params=
comment9.target=int\ anzahlGeben()
numComments=12
